#!/bin/bash -i

## Give is a command to share files with other users. It requires a spool area.
##

# Administrative variables: userlimit per give and permissions group blacklist
userlimit=5

# Clean and unset vars. We now also use -i above.
giver=""
user=""
userlist=()
tempuserlist=()
emailmessage=""
messagebody=""
SUBJECT=""
EMAIL=""
tmpdir=""
parentdir=""
dir2tar=""
current_dir=""
PATH=""
LD_LIBRARY_PATH=""
unset IFS
my_date=`/bin/date +%s`
quietflag="false"
messageflag="false"
batchflag="no"

# Implementation Definitions
#SPOOLAREA=/global/scratch2/gt
SPOOLAREA=/project/projectdirs/gt

# Get Giver's Name
giver=`/usr/bin/whoami`

# Get Hostname
myhost=`/usr/common/usg/bin/nersc_host`
#echo $myhost

if [ "$myhost" == "genepool" ]; then
  myreadlink="/bin/readlink"
  mylogger="/usr/bin/logger"
  mymail="/usr/bin/mail"
else
  myreadlink="/usr/bin/readlink"
  mylogger="/bin/logger"
  mymail="/bin/mail"
fi

# Make sure scratch is available and giver has directory
if [ ! -d "$SPOOLAREA/$giver" ]; then
  echo "$giver has no mounted give area"
  exit 1
fi

# Catch odd directories
current_dir=`/bin/pwd`

while getopts ":u:m:bq" opt; do
  case $opt in
    u)
      userlist+=("$OPTARG")
      ;;
    m)
      messageflag="true"
      emailmessage="$OPTARG"
      ;;
    b)
      batchflag="yes"
      ;;
    q)
      quietflag="true"
      ;;
    \?)
      echo ""
      echo "Usage, simple: give -u <username> {-u <username> ... } <files>"
      echo " -u is a required option"
      echo "    Can be used multiple times to give the <files> to up to $userlimit users."
      echo ""
      echo ""
      echo "Usage, verbose: give {-q -b -m \"<message>\"} -u <username> {-u <username> ... } <files>"
      echo " -q, -m and -b are optional flags"
      echo ""
      echo " -q: Quiet mode. Will not send an email to the recipient. Cannot be used with -m."
      echo " -m: Message. Will add a message to the give email. Use '\n' to start a new line. Cannot be used with -q."
      echo " -b: Batch mode. Automatically appends time/date stamp to files with the same name as any previous, unretrieved give."
      echo "       Without -b: Will query overwrite or abort."
      echo ""
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done

# Check if userlist is empty
if [ ${#userlist[@]} -eq 0 ] 
then
      echo ""
      echo "Usage, simple: give -u <username> {-u <username> ... } <files>"
      echo " -u is a required option"
      echo "    Can be used multiple times to give the <files> to up to $userlimit users."
      echo ""
      echo ""
      echo "Usage, verbose: give {-q -b -m \"<message>\"} -u <username> {-u <username> ... } <files>"
      echo " -q, -m and -b are optional flags"
      echo ""
      echo " -q: Quiet mode. Will not send an email to the recipient. Cannot be used with -m."
      echo " -m: Message. Will add a message to the give email. Use '\n' to start a new line. Cannot be used with -q."
      echo " -b: Batch mode. Automatically appends time/date stamp to files with the same name as any previous, unretrieved give."
      echo "       Without -b: Will query overwrite or abort."
      echo ""
      exit 1
fi

# Check for both message and quiet flag.
# Obviously won't do what the user thinks, so exit.
if [ "$quietflag" == "true" ] && [ "$messageflag" == "true" ]
then
  echo ""
  echo "    Cannot send a message in quiet mode."
  echo "    Please choose one of -q and -m and try again."
  echo ""
  exit 1
fi

# Check userlist for valid users & unique names
# Storage of results jump to tempuserlist and back
#   for speed purposes.

# Check For Valid Users
for user in "${userlist[@]}"
do
   temp=`/usr/bin/id -u "$user" 2>&1`
   if [ $? -ne 0 ] || [ "$user" == "$temp" ]
   then
     echo "    username "$user" does not exist. "$user" will be ignored."
   else
     tempuserlist+=("$user") 
   fi
done

# Check if all usernames were invalid. 
if [ ${#tempuserlist[@]} -eq 0 ] 
then
      echo ""
      echo "    No valid usernames given."
      echo ""
      exit 1
fi

# Identify unique list of users
# Save unique list back to userList
userlist=($(echo ${tempuserlist[@]} | /usr/bin/sed "s/\s/\n/g" | /usr/bin/sort | /usr/bin/uniq ))

# Enact the user limit
if [ ${#userlist[@]} -gt $userlimit ]
then
      echo ""
      echo "    Number of users per give command is limited to $userlimit."
      echo ""
      exit 1
fi

# Output check for userlist testing
#echo " -------- "
#for user in "${userlist[@]}"
#do
#   echo $user
#done
#echo " -------- "
#exit 1

shift $(( OPTIND-1 ))

if [ -n "$1" ]
then

# Fix possible broken perms
  /usr/bin/chmod a+x "$SPOOLAREA/$giver"

# Make sure the giveandtake directory is created
# and set perms on giver/receiver gt directory here.
  for user in "${userlist[@]}"
  do

  /bin/mkdir -p "$SPOOLAREA/$giver/$user"
  /usr/bin/setfacl -R -d -m u:$user:rwx,g::---,m::rwx "$SPOOLAREA/$giver/$user"
  /usr/bin/setfacl -R -m u:$user:rwx,g::---,m::rwx "$SPOOLAREA/$giver/$user"

  for var in "$@"
  do

# Check Size and Number Limitation??
# Not implemented currently. Doing du on a directory
# takes time...

# Check sanity of $var
    if [ -d "$var" ]; then
      echo ""
    elif [ -a "$var" ]; then
      echo ""
    else
      echo "$var does not exist"
      exit 1
    fi

    my_var="$var"
    if [ "$myhost" == "genepool" ]; then
      my_short_var=`/usr/bin/basename "$var"`
    else
      my_short_var=`/bin/basename "$var"`
    fi

# Copy file over. Create .tar archive if directory.

# Below ${var%/} deletes a trailing slash from $var
# ${my_var##*/} deletes longest match of "*/" from front $var (i.e. deletes the path)

# Check, Is this a directory?
    if [ -d "$var" ]; then
      # Create .tar from directory
      my_var=${var%/}.tar
      my_var=${my_var##*/}
      tmpdir=${var%/}
      parentdir=`/usr/bin/dirname "$tmpdir"`
      dir2tar=${tmpdir##*/}
      echo "Creating tar archive from directory $var"
      cd "$parentdir"
      if [ -a "$SPOOLAREA/$giver/$user/$my_var" ] 
      then
        if [ "$batchflag" == "no" ]
        then
          echo "File $my_var already exists at destination. Overwrite?"
          select yn in "Yes" "No"; do
            case $yn in
              Yes ) 
                /bin/tar -cvf "$SPOOLAREA/$giver/$user/$my_var" "$dir2tar"
                if [ $? -eq 0 ] 
                then
                  messagebody="$messagebody \n $my_var"
                  /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_var"
                  /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_var"
                  echo "`/bin/date` - gave $user `$myreadlink -f '$my_var'`" >> ~/.filesgiven
                  $mylogger "`/bin/date` - giveandtake $giver gave $user `$myreadlink -f '$my_var'`"
                  echo "Gave $my_var."
                else 
                  echo "Failed to give $my_var. Removing any incomplete files."
                  # Remove incomplete give
                  /bin/rm "$SPOOLAREA/$giver/$user/$my_var"
                fi
                break;;
              No ) echo " " ; break;;
            esac
          done
        else
                my_var="${my_date}_${my_var}"
                /bin/tar -cvf "$SPOOLAREA/$giver/$user/$my_var" "$dir2tar"
                if [ $? -eq 0 ] 
                then
                  messagebody="$messagebody \n $my_var"
                  /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_var"
                  /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_var"
                  echo "`/bin/date` - gave $user `$myreadlink -f '$my_var'`" >> ~/.filesgiven
                  $mylogger "`/bin/date` - giveandtake $giver gave $user `$myreadlink -f '$my_var'`"
                  echo "Gave $my_var."
                else 
                  echo "Failed to give $my_var. Removing any incomplete files."
                  # Remove incomplete give
                  /bin/rm "$SPOOLAREA/$giver/$user/$my_var"
                fi
        fi
      else
        /bin/tar -cvf "$SPOOLAREA/$giver/$user/$my_var" "$dir2tar"
        if [ $? -eq 0 ] 
        then
          messagebody="$messagebody \n $my_var"
          /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_var"
          /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_var"
          echo "`/bin/date` - gave $user `$myreadlink -f '$my_var'`" >> ~/.filesgiven
          $mylogger "`/bin/date` - giveandtake $giver gave $user `$myreadlink -f '$my_var'`"
          echo "Gave $my_var."
        else 
          echo "Failed to give $my_var. Removing any incomplete files."
          # Remove incomplete give
          /bin/rm "$SPOOLAREA/$giver/$user/$my_var"
        fi
      fi
      cd "$current_dir"
      echo " "
# This is a file not a directory
    else
      if [ -a "$SPOOLAREA/$giver/$user/$my_short_var" ]
      then
        if [ "$batchflag" == "no" ]
        then
          echo "File $var already exists at destination. Overwrite?"
          select yn in "Yes" "No"; do
            case $yn in
              Yes ) 
                /usr/bin/rsync --progress --log-format="Giving $my_short_var" "$var" "$SPOOLAREA/$giver/$user"
                if [ $? -eq 0 ] 
                then
                  messagebody="$messagebody \n $my_short_var" 
                  /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_short_var"
                  /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_short_var"
                  echo "`/bin/date` - gave $user `$myreadlink -f '$var'`" >> ~/.filesgiven
                  $mylogger "`/bin/date` - giveandtake $giver gave $user `$myreadlink -f '$var'`"
                  echo "Gave $var"
                else 
                  echo "Failed to give $var. Removing incomplete file."
                  # Remove incomplete give
                  rm "$SPOOLAREA/$giver/$user/$my_short_var"
                fi
                echo " " 
                break;;
              No ) echo " " ; break;;
            esac
          done
        else
                my_short_var="${my_date}_${my_short_var}"
                /usr/bin/rsync --progress --log-format="Giving $my_short_var" "$var" "$SPOOLAREA/$giver/$user/$my_short_var"
                if [ $? -eq 0 ] 
                then
                  messagebody="$messagebody \n $my_short_var" 
                  /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_short_var"
                  /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_short_var"
                  echo "`/bin/date` - gave $user `$myreadlink -f '$var'`" >> ~/.filesgiven
                  $mylogger "`/bin/date` - giveandtake $giver gave $user `$myreadlink -f '$var'`"
                  echo "Gave $var"
                else 
                  echo "Failed to give $var. Removing incomplete file."
                  # Remove incomplete give
                  rm "$SPOOLAREA/$giver/$user/$my_short_var"
                fi
                echo " " 
        fi
      else
        echo "About to give $var"
        echo /usr/bin/rsync --progress --log-format="Giving $my_short_var" "$var" "$SPOOLAREA/$giver/$user"
        /usr/bin/rsync --progress --log-format="Giving $my_short_var" "$var" "$SPOOLAREA/$giver/$user"
        if [ $? -eq 0 ] 
        then
          messagebody="$messagebody \n $my_short_var"
          /usr/bin/setfacl -R -d -m u:$user:rwx "$SPOOLAREA/$giver/$user/$my_short_var"
          /usr/bin/setfacl -R -m u:$user:rw,g::---,m::rw "$SPOOLAREA/$giver/$user/$my_short_var"
          echo "Gave $var"
          echo "`/bin/date` - gave $user `$myreadlink -f '$var'`" >> ~/.filesgiven
          $mylogger "`/bin/date` - giveandtake $giver gave $user `/$myreadlink -f '$var'`"
        else 
          echo "Failed to give $var. Removing incomplete file."
          # Remove incomplete give
          rm "$SPOOLAREA/$giver/$user/$my_short_var"
        fi
        echo " "
      fi
    fi
  done  
  done

  # Email user if not in quiet mode
  if [ "$quietflag" == "false" ]; then

    for user in "${userlist[@]}"
    do

    if [ -z "$messagebody" ]
    then
      echo "No files given"
    else
      messagebody="Shared Files: $messagebody"
      messagebody="$messagebody \n\n Retrieve individual files using the take command and providing $giver as the username (-u) argument."
      # If user gave message, attach to end of email after instructions for take command.
      if [ "$messageflag" == "true" ]; then
         messagebody="$emailmessage \n\n $messagebody"
      fi
      # For security we no longer suggests users cut and paste from email
      #messagebody="$messagebody \n\n % take -u $giver <filename>"
      #messagebody="$messagebody \n\n Retrieve all files given by $giver using:"
      #messagebody="$messagebody \n\n % take -u $giver -a"

  # Email user

  # EMAIL subject
      SUBJECT="$giver has given you a file at NERSC."
  # Email To ?
      EMAIL="$user@nersc.gov"
  # Email From ?
      FROM="$giver@nersc.gov"
  # send an email using /bin/mail
      if [ "$myhost" == "datatran" ]; then
        echo -e "$messagebody" | $mymail -r "$FROM" -s "$SUBJECT" "$EMAIL"
      else
        echo -e "$messagebody" | $mymail -s "$SUBJECT" "$EMAIL" -- -f "$FROM"
      fi
    fi
    done
  fi

else
  echo "No file arguments given."
fi

exit 0
